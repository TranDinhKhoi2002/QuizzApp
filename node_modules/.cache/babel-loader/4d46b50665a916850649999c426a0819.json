{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project_ReactJS\\\\QuizzApp\\\\src\\\\pages\\\\Question.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, CircularProgress, Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { decode } from \"html-entities\";\nimport Axios from \"../hooks/Axios\";\nimport { changeScoreHandler } from \"../Redux/action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomIndex = number => {\n  console.log(number, Math.random(), Math.floor(number));\n  return Math.floor(Math.random() * Math.floor(number));\n};\n\nconst Question = () => {\n  _s();\n\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [options, setOptions] = useState([]);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    question_category,\n    question_difficulty,\n    question_type,\n    amount_of_question,\n    score\n  } = useSelector(state => state);\n  let apiUrl = `/api.php?amount=${amount_of_question}`;\n\n  if (question_category) {\n    apiUrl = apiUrl.concat(`&category=${question_category}`);\n  }\n\n  if (question_difficulty) {\n    apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\n  }\n\n  if (question_type) {\n    apiUrl = apiUrl.concat(`&type=${question_type}`);\n  }\n\n  const {\n    response,\n    loading,\n    error\n  } = Axios({\n    url: apiUrl\n  });\n  useEffect(() => {\n    if (response !== null && response !== void 0 && response.results.length) {\n      const question = response.results[questionIndex];\n      let answers = [...question.incorrect_answers];\n      answers.splice(getRandomIndex(question.incorrect_answers.length), 0, question.correct_answer);\n      setOptions(answers);\n    }\n  }, [response, questionIndex]);\n\n  if (loading) {\n    /*#__PURE__*/\n    _jsxDEV(Box, {\n      mt: 20,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this);\n  }\n\n  const clickAnswerHandler = e => {\n    const question = response.results[questionIndex];\n\n    if (e.target.textContent === question.correct_answer) {\n      dispatch(changeScoreHandler(score + 1));\n    }\n\n    if (questionIndex < response.results.length - 1) {\n      setQuestionIndex(questionIndex + 1);\n    } else {\n      history.push(\"/score\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: [\"Question \", questionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      mt: 5,\n      children: decode(response.results[questionIndex].question)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), options.map((data, id) => /*#__PURE__*/_jsxDEV(Box, {\n      mt: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: clickAnswerHandler,\n        children: decode(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: [\"Score: \", score, \" / \", response.results.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Question, \"Tv7YljJZMl1iRNgDeVeiPr0XNjA=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["D:/Project_ReactJS/QuizzApp/src/pages/Question.jsx"],"names":["Button","CircularProgress","Typography","Box","useEffect","useState","useDispatch","useSelector","useHistory","decode","Axios","changeScoreHandler","getRandomIndex","number","console","log","Math","random","floor","Question","questionIndex","setQuestionIndex","options","setOptions","dispatch","history","question_category","question_difficulty","question_type","amount_of_question","score","state","apiUrl","concat","response","loading","error","url","results","length","question","answers","incorrect_answers","splice","correct_answer","clickAnswerHandler","e","target","textContent","push","map","data","id"],"mappings":"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","sourcesContent":["import { Button, CircularProgress, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { decode } from \"html-entities\";\r\n\r\nimport Axios from \"../hooks/Axios\";\r\nimport { changeScoreHandler } from \"../Redux/action\";\r\n\r\nconst getRandomIndex = (number) => {\r\n  console.log(number, Math.random(), Math.floor(number));\r\n  return Math.floor(Math.random() * Math.floor(number));\r\n};\r\n\r\nconst Question = () => {\r\n  const [questionIndex, setQuestionIndex] = useState(0);\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const {\r\n    question_category,\r\n    question_difficulty,\r\n    question_type,\r\n    amount_of_question,\r\n    score,\r\n  } = useSelector((state) => state);\r\n\r\n  let apiUrl = `/api.php?amount=${amount_of_question}`;\r\n\r\n  if (question_category) {\r\n    apiUrl = apiUrl.concat(`&category=${question_category}`);\r\n  }\r\n\r\n  if (question_difficulty) {\r\n    apiUrl = apiUrl.concat(`&difficulty=${question_difficulty}`);\r\n  }\r\n\r\n  if (question_type) {\r\n    apiUrl = apiUrl.concat(`&type=${question_type}`);\r\n  }\r\n\r\n  const { response, loading, error } = Axios({ url: apiUrl });\r\n\r\n  useEffect(() => {\r\n    if (response?.results.length) {\r\n      const question = response.results[questionIndex];\r\n      let answers = [...question.incorrect_answers];\r\n      answers.splice(\r\n        getRandomIndex(question.incorrect_answers.length),\r\n        0,\r\n        question.correct_answer\r\n      );\r\n\r\n      setOptions(answers);\r\n    }\r\n  }, [response, questionIndex]);\r\n\r\n  if (loading) {\r\n    <Box mt={20}>\r\n      <CircularProgress />\r\n    </Box>;\r\n  }\r\n\r\n  const clickAnswerHandler = (e) => {\r\n    const question = response.results[questionIndex];\r\n\r\n    if (e.target.textContent === question.correct_answer) {\r\n      dispatch(changeScoreHandler(score + 1));\r\n    }\r\n\r\n    if (questionIndex < response.results.length - 1) {\r\n      setQuestionIndex(questionIndex + 1);\r\n    } else {\r\n      history.push(\"/score\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h4\">Question {questionIndex + 1}</Typography>\r\n      <Typography mt={5}>\r\n        {decode(response.results[questionIndex].question)}\r\n      </Typography>\r\n      {options.map((data, id) => (\r\n        <Box mt={2} key={id}>\r\n          <Button variant=\"contained\" onClick={clickAnswerHandler}>\r\n            {decode(data)}\r\n          </Button>\r\n        </Box>\r\n      ))}\r\n      <Box mt={5}>\r\n        Score: {score} / {response.results.length}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}